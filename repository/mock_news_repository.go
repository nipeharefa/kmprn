// Code generated by MockGen. DO NOT EDIT.
// Source: news_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/nipeharefa/kmprn/model"
	reflect "reflect"
)

// MockNewsRepository is a mock of NewsRepository interface
type MockNewsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewsRepositoryMockRecorder
}

// MockNewsRepositoryMockRecorder is the mock recorder for MockNewsRepository
type MockNewsRepositoryMockRecorder struct {
	mock *MockNewsRepository
}

// NewMockNewsRepository creates a new mock instance
func NewMockNewsRepository(ctrl *gomock.Controller) *MockNewsRepository {
	mock := &MockNewsRepository{ctrl: ctrl}
	mock.recorder = &MockNewsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNewsRepository) EXPECT() *MockNewsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNewsRepository) Create(arg0 *model.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockNewsRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNewsRepository)(nil).Create), arg0)
}

// FindByID mocks base method
func (m *MockNewsRepository) FindByID(ID int) (model.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID)
	ret0, _ := ret[0].(model.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockNewsRepositoryMockRecorder) FindByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockNewsRepository)(nil).FindByID), ID)
}
